name: Bitunix Bot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  GO_VERSION: '1.24'
  PYTHON_VERSION: '3.12'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Go dependencies
        run: go mod download

      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt

      - name: Run Go linter
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: Run Go tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run ML tests
        run: |
          cd scripts
          python -m pytest -xvs

      - name: Build binary
        run: go build -o bitrader ./cmd/bitrader

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: bitrader-binary
          path: bitrader
          retention-days: 7

  docker-build:
    name: Build Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/bitunix-bot
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  ml-pipeline:
    name: ML Model Training
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt

      - name: Generate sample data
        run: python scripts/generate_sample_data.py

      - name: Train ML model
        run: python ml-retrain.yml --data-file scripts/training_data.json --output-dir models

      - name: Validate model
        run: python scripts/model_validation.py --model models/model.onnx

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ml-model
          path: |
            models/model.onnx
            models/model_feature_info.json
            models/model_metrics.json
          retention-days: 7

  deploy-development:
    name: Deploy to Development
    needs: [docker-build, ml-pipeline]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

      - name: Deploy to development
        run: |
          helm upgrade --install bitunix-bot ./deploy/helm/bitunix-bot \
            --namespace bitunix-bot-development \
            --create-namespace \
            --values ./deploy/helm/values-development.yaml \
            --set image.tag=${{ github.sha }} \
            --set secrets.apiKey=${{ secrets.BITUNIX_API_KEY }} \
            --set secrets.secretKey=${{ secrets.BITUNIX_SECRET_KEY }}

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/bitunix-bot -n bitunix-bot-development
          kubectl get pods -n bitunix-bot-development

  deploy-staging:
    name: Deploy to Staging
    needs: [docker-build, ml-pipeline]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          helm upgrade --install bitunix-bot ./deploy/helm/bitunix-bot \
            --namespace bitunix-bot-staging \
            --create-namespace \
            --values ./deploy/helm/values-staging.yaml \
            --set image.tag=${{ github.sha }} \
            --set secrets.apiKey=${{ secrets.BITUNIX_API_KEY }} \
            --set secrets.secretKey=${{ secrets.BITUNIX_SECRET_KEY }}

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/bitunix-bot -n bitunix-bot-staging
          kubectl get pods -n bitunix-bot-staging

  deploy-production:
    name: Deploy to Production
    needs: [docker-build, ml-pipeline, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Deploy to production
        run: |
          helm upgrade --install bitunix-bot ./deploy/helm/bitunix-bot \
            --namespace bitunix-bot-production \
            --create-namespace \
            --values ./deploy/helm/values-production.yaml \
            --set image.tag=${{ github.sha }} \
            --set secrets.apiKey=${{ secrets.BITUNIX_API_KEY }} \
            --set secrets.secretKey=${{ secrets.BITUNIX_SECRET_KEY }}

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/bitunix-bot -n bitunix-bot-production
          kubectl get pods -n bitunix-bot-production
