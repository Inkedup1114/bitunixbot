name: ML Model Retraining

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days of data to use for training'
        required: true
        default: '30'
        type: string
      symbol:
        description: 'Trading symbol to train on'
        required: true
        default: 'BTCUSDT'
        type: string
      sigma_threshold:
        description: 'Sigma threshold for reversal detection'
        required: false
        default: '1.5'
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  retrain:
    name: Retrain ML Model
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt

      - name: Download latest data
        if: ${{ github.event_name == 'schedule' }}
        run: |
          # For scheduled runs, we need to fetch data from production
          # This would typically connect to a database or API to get the latest data
          echo "Fetching latest production data..."
          # Placeholder for actual data fetching logic
          # Example: aws s3 cp s3://bitunix-data/latest/features.db ./data/features.db
          
          # For demo purposes, generate sample data
          python scripts/generate_sample_data.py --days 30 --output scripts/training_data.json

      - name: Export data for training
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          # For manual runs, use the specified parameters
          echo "Exporting data for training..."
          go run scripts/export_data.go -days ${{ github.event.inputs.days || '30' }} -symbol ${{ github.event.inputs.symbol || 'BTCUSDT' }} -output scripts/training_data.json

      - name: Train ML model
        run: |
          python ml-retrain.yml \
            --data-file scripts/training_data.json \
            --output-dir models \
            --symbol ${{ github.event.inputs.symbol || 'BTCUSDT' }} \
            --sigma-threshold ${{ github.event.inputs.sigma_threshold || '1.5' }} \
            --verbose

      - name: Validate model
        run: |
          python scripts/model_validation.py \
            --model models/model.onnx \
            --test-data scripts/test_data.json

      - name: Compare with previous model
        run: |
          if [ -f "models/model-previous.onnx" ]; then
            echo "Comparing with previous model..."
            python scripts/compare_models.py \
              --new-model models/model.onnx \
              --old-model models/model-previous.onnx \
              --test-data scripts/test_data.json
          else
            echo "No previous model found for comparison"
          fi

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ml-model-${{ github.run_id }}
          path: |
            models/model.onnx
            models/model_feature_info.json
            models/model_metrics.json
          retention-days: 30

      - name: Create model release
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v2
        with:
          name: ML Model ${{ github.event.inputs.symbol || 'BTCUSDT' }} - ${{ github.run_id }}
          tag_name: model-${{ github.run_id }}
          files: |
            models/model.onnx
            models/model_feature_info.json
            models/model_metrics.json
          body: |
            ML Model for ${{ github.event.inputs.symbol || 'BTCUSDT' }}
            
            Training parameters:
            - Days: ${{ github.event.inputs.days || '30' }}
            - Sigma threshold: ${{ github.event.inputs.sigma_threshold || '1.5' }}
            
            See attached metrics file for performance details.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-model:
    name: Deploy ML Model
    needs: retrain
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: ml-model-${{ github.run_id }}
          path: models

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Create ConfigMap for model
        run: |
          kubectl create configmap ml-model \
            --from-file=models/model.onnx \
            --from-file=models/model_feature_info.json \
            -n bitunix-bot-staging \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Restart pods to pick up new model
        run: |
          kubectl rollout restart deployment/bitunix-bot -n bitunix-bot-staging
          kubectl rollout status deployment/bitunix-bot -n bitunix-bot-staging

      - name: Verify model deployment
        run: |
          echo "Waiting for pods to stabilize..."
          sleep 30
          kubectl get pods -n bitunix-bot-staging
          
          # Check if model is loaded correctly by examining logs
          POD=$(kubectl get pods -n bitunix-bot-staging -l app=bitunix-bot -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD -n bitunix-bot-staging | grep -i "model loaded"
