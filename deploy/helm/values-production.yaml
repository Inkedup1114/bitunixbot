# Production environment values
replicaCount: 3

image:
  repository: your-registry.com/bitunix-bot
  pullPolicy: Always
  tag: "production"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/bitunix-bot-production-role"
  name: ""

podAnnotations:
  production-environment: "true"
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
  hosts:
    - host: bitunix-bot.example.com
      paths:
        - path: /metrics
          pathType: Prefix
        - path: /health
          pathType: Prefix
  tls:
    - secretName: bitunix-bot-tls
      hosts:
        - bitunix-bot.example.com

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - bitunix-bot
        topologyKey: kubernetes.io/hostname

# Bot-specific configuration
bot:
  dryRun: false  # Live trading
  logLevel: warn
  config:
    api:
      baseURL: "https://api.bitunix.com"
      wsURL: "wss://fapi.bitunix.com/public"
      timeout: "5s"
      retryAttempts: 3
      rateLimitPerSecond: 10
    trading:
      symbols: ["BTCUSDT", "ETHUSDT", "ADAUSDT", "DOTUSDT"]
      baseSizeRatio: 0.001  # Conservative position sizing
      maxDailyLoss: 0.02    # 2% max daily loss
      maxPositionSize: 0.005
      maxPriceDistance: 2.5
      riskManagement:
        enabled: true
        stopLoss: 0.02      # 2% stop loss
        takeProfit: 0.04    # 4% take profit
        maxOpenPositions: 3
    ml:
      modelPath: "model.onnx"
      probThreshold: 0.7    # Higher threshold for production
      timeout: "10s"
      fallbackStrategy: "conservative"  # Conservative when ML fails
      validationEnabled: true
      minConfidence: 0.6
    features:
      vwapWindow: "30s"
      vwapSize: 1200        # Larger buffer for stability
      tickSize: 100
      technicalIndicators:
        rsi: true
        macd: true
        bollinger: true
    system:
      pingInterval: "10s"
      dataPath: "/srv/data"
      metricsPort: 8080
      restTimeout: "3s"
      logLevel: "warn"      # Production logging
      maxMemoryUsage: 512   # MB
      gcPercent: 20         # Conservative GC

# Production-specific settings
monitoring:
  enabled: true
  prometheusAnnotations: true
  alerting:
    enabled: true
    channels: ["slack", "email"]
    thresholds:
      errorRate: 0.05
      latency: 1000  # ms
      memoryUsage: 80  # percent

persistence:
  enabled: true
  storageClass: "gp2"
  size: 50Gi
  mountPath: "/srv/data"

# Health checks
healthCheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /metrics
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /metrics
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
  startupProbe:
    httpGet:
      path: /metrics
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 10

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 8080
  egress:
    - to: []
      ports:
      - protocol: TCP
        port: 443  # HTTPS
      - protocol: TCP
        port: 53   # DNS
      - protocol: UDP
        port: 53   # DNS

# Resource quotas
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "5"
    requests.memory: "5Gi"
    limits.cpu: "10"
    limits.memory: "10Gi"

# Backup configuration
backup:
  enabled: true
  schedule: "0 1 * * *"  # Daily at 1 AM
  retention: 7  # Days
  destination: "s3://bitunix-backups/production"

# Circuit breaker configuration
circuitBreaker:
  enabled: true
  thresholds:
    errorRate: 0.1
    latency: 2000  # ms
    consecutiveErrors: 5
  resetTimeout: 300  # seconds

# Metrics and monitoring
metrics:
  prometheus:
    enabled: true
  grafana:
    enabled: true
    dashboards:
      - trading
      - system
      - ml
  alerts:
    slack:
      enabled: true
      channel: "#bitunix-alerts"
    email:
      enabled: true
      recipients: ["alerts@example.com"]
    pagerduty:
      enabled: true
      serviceKey: "your-pagerduty-service-key"

# Security settings
security:
  secretsEncryption: true
  networkPolicies: true
  podSecurityPolicies: true
  rbac:
    create: true
    rules:
      - apiGroups: [""]
        resources: ["configmaps", "secrets"]
        verbs: ["get", "list", "watch"]